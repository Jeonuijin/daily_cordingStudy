9/12 (화)

*반복문 : for, while, do while

for (초기치; 조건식; 증감식) { }  : var과 let만 사용가능
	let은 중괄호 안에서만 사용가능하기 때문에 for문 밖에서 변수를 불러오게되면 오류가 난다.
	var은 중괄호 밖에서도 사용가능.

*반복문을 사용해서 구구단 table형태로 만들기
-document.write() 에 태그 입력도 가능하고
 연산자 += 를 사용한 문자열 붙이기 방식도 가능함.

-문자열 붙이기를 사용할 때 주의할점 :  let htmlTag = "";이런식으로 초기화를 해주어야
 문자열 붙일때 undefinde가 뜨는것을 막을수가 있다.(변수가 문자열이라는 것을 명시)
	
*while, do ~ while문 
-Java랑 동일

*break, continue
outFor : outFor레이블은 바깥쪽 for 반복문을 가리킵니다.outFor 레이블은 바깥쪽 for 반복문을 가리킵니다.

*hosting
- var 선언변수의 사용범위 function
- var, function : hosting - 끌어올려짐
	: var과 function은 hosting의 기능이 있기 때문에 변수 선언 전 호출을 해도 에러가 발생하지 않고
	  undefined(변수가 선언되었지만 아직 값이 할당되지 않은 경우를 나타내는 특별한 값을 가리킴)가 출력된다.
	 
*함수 function
function 키워드로 함수를 선언한다. ex) function 함수명 () { }

*익명함수 : 함수 선언시에 이름이 정의되지 않은 함수
변수에 함수를 저장하는 식으로 사용한다. ex) var fn = Function(param) { }; // 웬만하면 세미콜론을 붙여준다.
호출시에는 변수명을 호출한다. ex) fn(파라미터값);

*자동실행 함수
매개변수 없는 형태 : (function(){})();
매개변수 없는 형태 : (function(매개변수){})(매개변수값);

*object
객체 선언 : let tv = new Object();
객체 속성 추가 : tv.color = "black";
객체에 함수 추가 : tv.on = function(){
					console.log("TV전원 ON");
					document.write("<p>TV전원 ON</p>");
			};
속성명에 접근할수 있는 방법 2가지
1. 객체명.속성명 ex)tv.color
2. 객체명[변수명] or 객체명[속성명] 
ex) let prop = "color";
    document.write('prop: ' + prop + " - tv[prop] : " + tv[prop], "<br>");  
    // 변수값을 집어넣어서 결국엔 prop의 변수값인 color가 집어넣어짐으로 tv의 color속성값이 출력된다. 
	// 하지만 tv.prop(변수명) 이런식으로는 변수명을 사용하지 못한다. 
	
객체의 속성 확인(for ~ in)
형식 :   for (let attr in tv) {
       document.write("tv 속성확인 - " + attr + " : " + tv[attr], "<br>");
    }
	
	
//==============================
    콜백(callback) 함수 : 함수의 파라미터 값으로 전달한 함수
    실행시 나중에 호출되어 실행되는 함수
	==>콜백 함수의 파라미터 값으로 함수를 사용하는 것이 일반적입니다. 콜백 함수는 다른 함수에 전달되어 나중에 실행될 함수를 나타냅니다.
		따라서 콜백 함수는 함수 형태를 가진 값이어야 합니다.

    var fn2 = function(param) {
        
        param("안녕~ 나는 콜백함수라고 해~~"); //전달받은 함수 호출
    };
    -------------
    fn2(function(msg) {
        document.write("<h3>" + msg + "</h3>");
    });
    
	--> 결과 값 : 안녕~ 나는 콜백함수라고 해~~ (h3로 적용된 결과)
	
*** 설명 ***
fn2(function(msg) {
        document.write("<h3>" + msg + "</h3>");
    });
이 함수 호출에서 파라미터로 작용하는 함수는 콜백함수의 파라미터로 호출되어 들어간다.
콜백함수로 들어간 파라미터 함수는 콜백함수보다 먼저 실행되는데, 
콜백함수의 파라미터는 함수의 속성을 가지고 있기 때문에 다음과같이
콜백함수의 파라미터함수 안에 호출된 파라미터함수가 들어가 실행하게 된다. 
param("안녕~ 나는 콜백함수라고 해~~") {
 function(msg) {
        document.write("<h3>" + msg + "</h3>");
    }
}
실행하게 되면 msg 파라미터 값으로 콜백함수의 파라미터 값인 "안녕~ 나는 콜백함수라고 해~~" 가 들어가게되면서
document.write("<h3>" + msg + "</h3>"); 이 문장이 실행되어 출력되게된다.


*배열의 sort
lotto.sort(function(a, b){
        return a - b;   //b - a 는 내림차순
    });
--> 이런식으로 작성
**자세한설명 : 
a - b를 반환하면 오름차순으로 정렬되는 이유는 sort 메서드의 동작 방식과 반환값에 대한 규칙 때문입니다.

sort 메서드는 정렬을 위해 비교 함수(comparison function)를 사용합니다. 이 비교 함수는 두 개의 인자(a와 b)를 받아서 0보다 작은 값을 반환하면 a를 b보다 앞에 위치시키고, 0을 반환하면 a와 b의 위치를 변경하지 않고, 0보다 큰 값을 반환하면 a를 b보다 뒤에 위치시킵니다.

따라서 a - b를 반환하면 다음과 같이 동작합니다:

a가 b보다 작다면, a - b는 음수가 되고, a는 b보다 앞에 위치하게 됩니다.
a가 b와 같다면, a - b는 0이 되고, a와 b의 순서는 변경되지 않습니다.
a가 b보다 크다면, a - b는 양수가 되고, a는 b보다 뒤에 위치하게 됩니다.
결과적으로 a - b를 반환하면 a와 b를 오름차순으로 정렬하게 됩니다. 
이러한 동작 방식은 JavaScript의 sort 메서드의 표준 규약입니다.